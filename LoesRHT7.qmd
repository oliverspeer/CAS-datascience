# Arbeitsblatt HT7 {.unnumbered}

## Aufgabe 1

```{r}
P <- data.frame(Proband=1:14,
                Auto1=c(37.0, 25.8, 16.2, 24.2, 22.0, 33.4, 23.8, 58.2,
                         33.6, 24.4, 23.4, 21.2, 36.2, 29.8),
                Auto2=c(17.8, 20.2, 16.8, 41.4, 21.4, 38.4, 16.8, 32.2,
                         27.8, 23.2, 29.6, 20.6, 32.2, 53.8))
P.diff <- P$Auto1 - P$Auto2

# histogram from P$Auto1 and P$Auto2 with base R
par(mar=c(1,1,1,1))
par(mfrow=c(5,1))
hist(P$Auto1)
hist(P$Auto2)
hist(P.diff)
boxplot(P$Auto1, P$Auto2, names=c("Auto1", "Auto2"))
boxplot(P.diff, names="Differenz", horizontal=TRUE)

qqnorm(P.diff)
qqline(P.diff, lty=2)

# add the function qqnormSim to your R environment
source("RFn-qqnormSim.R")
qqnormSim(P$Auto1, SEED=888)
t.test(P$Auto1, P$Auto2, mu=0, paired=TRUE, conf.level = 0.95)

```

# Aufgabe 3 A/B Test mit ungepaartem t-Test

## 

```{r}
load("grene.rda")
qqnormSim(grene$A, rob = TRUE, SEED=888)
qqnormSim(grene$B, rob = TRUE, SEED=888)

qqnormSim(log(grene$A), rob = TRUE, SEED=888)
qqnormSim(log(grene$B), rob = TRUE, SEED=888)

grene.diff <- grene$A - grene$B
boxplot(grene.diff, names="Differenz", horizontal=TRUE)
t.test(grene$A, grene$B, mu=0, paired=FALSE, conf.level = 0.95, var.equal=TRUE, alternative = "less")
t.test(log(grene$A), log(grene$B), mu=0, paired=FALSE, conf.level = 0.95, var.equal=TRUE, alternative = "less")



```

Die H0 Hypothese, dass der Unterschied zwischen A und B null sei, kann mit einem p-Wert von 0.001615 abgelehnt werden. Die H1 Hypothese, dass der Unterschied zwischen A und B nicht null sei, kann angenommen werden. Das 95% Konfidenzintervall liegt zwischen -818 und -195. Auf page A werden also weniger Einkäufe getätigt als auf page B. Die Neuerungen auf page B scheinen also zu funktionieren.

wie gross ist der Unterschied zwischen A und B? 95% Konfidenzintervall für den Unterschied zwischen A und B:

```{r}
exp(6.883183 - 7.233905) # = 0.7

```

Also werden mit B 70% mehr Einkäufe getätigt als mit A.

# Aufgabe 4 Messung der Lichtgeschwindigkeit

```{r}
load("SpeedOfLight.RData")
SoL <- SpeedOfLight
# SoL without -44 and without -2
SoL1 <- SoL[SoL>0]

hist(SoL)
boxplot(SoL, horizontal=TRUE)
qqnormSim(SoL, rob = TRUE, SEED=888)
t.test(SoL, conf.level = 0.95, alternative = "two.sided")
t.test(SoL1, conf.level = 0.95, alternative = "two.sided")

```

## 4c) Vertrauensintervall der Lichtgeschwindigkeit

```{r}
SoL.a <- 7400/(SoL + 24800)*10^9
SoL.a1 <- 7400/(SoL1 + 24800)*10^9
qqnormSim(SoL.a, rob = TRUE, SEED=888)
qqnormSim(SoL.a1, rob = TRUE, SEED=888)
t.test(SoL.a, conf.level = 0.95, alternative = "two.sided")
t.test(SoL.a1, conf.level = 0.95, alternative = "two.sided")


```

# Aufgabe 6 Exponentialverteilung

```{r}
AF <- c(4.5, 11.5, 16, 20.7, 20.8, 31, 34.5, 46, 61)

summary(AF)
lambda <- mean(AF)
# Schätzung der Rate
lambda.kw <- 1/lambda
par(mfrow = c(1,1))
hist(AF, nclass = 4, freq = F, ylim = c(0, 0.05))
curve(dexp(x, rate = 1/mean(AF)), col = "navy", add = T)
# add a normal distribution curve
curve(dnorm(x, mean = mean(AF), sd = sd(AF)), col = "red", add = T)
# add a lognormal distribution curve
curve(dlnorm(x, meanlog = mean(log(AF)), sdlog = sd(log(AF))), col = "green", add = T)
```

## 95% CI mit bootstrap

```{r}
library(boot)
f.rate <- function(x, ind){
  1/mean(x[ind])
}
set.seed(seed = 4711)
AF.boot <- boot(AF, f.rate, R = 5999)
boot.ci(AF.boot, conf = 0.95, type = "perc")
boot.ci(AF.boot, conf = 0.95, type = "bca")
```

Interpretation:

$$
\text{Rate}(1000^{-1}) = \frac {1}{\lambda} = \frac {1}{mean(AF)} = 0.037
$$ 

D.h. es gibt 0.000037 Ausfälle pro Betriebsstunde, bzw 1 Ausfall alle
```{r, echo=FALSE}
cat(round(100000/3.7, 2))
```

Stunden.

Das 95% CI: pro Stunde gibt es zwischen 0.0000258 und 0.0000572 Ausfälle (mit der percentile Variante)

```{r}
par(mfrow=c(1,1))
hist(AF.boot$t, col="gray", xlab=expression(lambda~'*'),
     main="Bootstrap-Verteilung", freq=FALSE)
abline(v=c(1/mean(AF), mean(AF.boot$t)), col=c("red", "blue"),
       lty=c(1,2), lwd=c(3,3))

# add a log-normal distribution curve
curve(dlnorm(x, meanlog=log(1/mean(AF)), sdlog=sd(log(1/AF))),
      col="navy", add=TRUE)

# add a log-normal distribution curve of the bootstrap distribution
curve(dlnorm(x, meanlog=log(mean(AF.boot$t)), sdlog=sd(log(AF.boot$t))),
      col="green", add=TRUE)

# add a normal distribution curve of the bootstrap distribution
curve(dnorm(x, mean=mean(AF.boot$t), sd=sd(AF.boot$t)),
      col="orange", add=TRUE)

# add a normal distribution curve of AF
curve(dnorm(x, mean=mean(AF), sd=sd(AF)),
      col="black", add=TRUE)


```
