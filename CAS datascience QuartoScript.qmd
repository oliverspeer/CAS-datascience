---
title: "CAS datascience script"
author: "Oliver Speer"
date: 6.9.2023
format: html
editor: visual
---

## ZHAW web-Umgebung

Lerninhalte an der ZHAW werden in moodle <https://moodle.zhaw.ch/enrol/index.php?id=15611> bereitgestellt. Zugangs-Management via edu-ID <https://login.eduid.ch/idp/profile/SAML2/Redirect/SSO?execution=e1s4>.

Zugangsadmin für ZHAW Umgebung: <https://selfservice.zhaw.ch/index.html>.

## Installation R und RStudio

<https://moodle.zhaw.ch/pluginfile.php/1344143/mod_resource/content/3/Einstieg_in_R_und_RStudio.pdf>

## Kursdaten

<https://moodle.zhaw.ch/pluginfile.php/1344144/mod_resource/content/3/CAS-DA2023-18_Kursdaten_HS.pdf>

# Modul A - Statistische Grundlagen der Datenanalyse

## Day 01 06.09.2023

## Erste R-Übungen:

```{r}
3+3
sqrt(9)
exp(2)
log(90)
1/0
sqrt(-9)

v <- 1:5
v
1:5
vec1 <- 1:3
vec2 <- 4:6
vec3 <- 7:10
vec3 + vec2

sqrt(vec2)
range(vec2)

summary_vec3 <- c(min(vec3), max(vec3), sum(vec3))




```

## Übungsblatt 1

### 2b)

#### Berechne die Summe der natürlichen Zahlen 1 bis 100

```{r}
sum(1:100)

```

### 3a)

```{r}
v <- 1:12
m1 <- matrix(data = v, nrow = 3, ncol = 4, byrow = F)


```

## Übungsblatt 2

### 1a)

```{r}
w <- c(1:5, 2)
mode(w)
w
typeof(w)
x <- c(6:13)/3
mode(x)
typeof(x)
y <- c(TRUE, FALSE, TRUE, TRUE)
mode(y)
typeof(y)


z <- c("Marie", "Betty", "Peter", "Peter")

mode(z)
typeof(z)

z_f <- as.factor(z)

```

### 1b)

```{r}
u <- (w <= 2)
u
mode(u)
as.numeric(u)
as.character(u)
as.character(z_f)
as.numeric(z_f)
as.numeric(z)
unique(z_f)
unique(w)
?unique
```

### 2a)

```{r}
seq(95,-5,-5)
rep(letters,each = 2)

zz <- c(1:10)
rep(zz, times = zz)

matrix(seq(3, 75, 3), nrow = 5, ncol = 5, byrow = T)
```

### 3a)

```{r}
dat <- data.frame(
  Name = c("Ruedi", "Hans", "Peter", "Stefan", "Julia", "Maria"),
    Alter = c(27, 34, 21, 25, 39, 25),
  Note = c(5, 4, 4, 3, 6, 5), 
  Studium = c(F, T, T, F, F, T))

nrow(dat)
dim(dat)
nrow(dat)*ncol(dat)
```

### Aufgabe 4 = Aufgabe 2 Übungsblatt zur Vorlesung

```{r}
library(readxl)
dat <- read_xlsx("C:\\Users\\oliver.speer\\Documents\\ZHAW\\Erhebung_CASDA_HS23.xlsx")

mode(dat$Gruppe)
typeof(dat$Gruppe)
head(dat, n = 2)
str(dat)
```

### Absolute Häufigkeiten Haarfarbe:

```{r}
table(dat$Q02_Haarfarbe)

```

### Relative Häufigkeiten Haarfarbe

```{r}
rel.hairc <- table(dat$Q02_Haarfarbe)/length(dat$Q02_Haarfarbe)
round(rel.hairc, 2)
```

### Kummulierte Summe

```{r}
cumsum(table(dat$Q02_Haarfarbe))

```

### Absolute Häufigkeiten "Stunden für Sport":

```{r}
table(dat$Q05_Sport)

```

### Relative Häufigkeiten "Stunden für Sport":

```{r}
rel.sporth <- table(dat$Q05_Sport)/length(dat$Q05_Sport)
round(rel.sporth, 2)
```

### Arbeitsblatt 2

### 4)

```{r}
leisure.time <- c(
  rep("sports", 5), 
  rep("cooking", 2), 
  rep("shopping", 1), 
  rep("WWW", 7), 
  rep("reading", 3), 
  rep("music", 4)
                   )

tab.leisure.time <- table(leisure.time, useNA = "always")
round(tab.leisure.time, 2)
tab.rel.leisure.time.length <- table(leisure.time, useNA = "always")/length(leisure.time)
round(tab.rel.leisure.time.length, 2)
tab.rel.leisure.time <- table(leisure.time, useNA = "always")/sum(!is.na(leisure.time))
round(tab.rel.leisure.time, 2)
barplot(sort(tab.leisure.time, decreasing = T), col = "green", las = 2)
barplot(sort(tab.rel.leisure.time, decreasing = T), col = "blue", las = 2)
pie(table(leisure.time, useNA = "always"))



```

## Grafische Darstellungen

```{r}
tab <- table(dat$Q02_Haarfarbe, useNA = "always")
barplot(sort(tab, decreasing = T), col = "blue", las = 2)

tab_SW <- table(dat$Q09_Stockwerk)
bp <- barplot(sort(tab_SW, decreasing = T),
        main = "Stockwerke der Schlafzimmer",
        ylab = "absolute Häufigkeiten",
        col = "red",
        las = 2,
        horiz = F,
        yaxt = "n"
          )
axis(2, at = axTicks(2), labels = axTicks(2), las = 1)

tab_plz <- table(dat$Q08_Postleitzahl)
bp_plz <- barplot(sort(tab_plz, decreasing = T),
        main = "Postleitzahlen",
        ylab = "absolute Häufigkeiten",
        col = "red",
        las = 2,
        horiz = F,
        cex.names = 0.5
          )

tab_time <- table(dat$Q14_Fahrzeit)
bp_time <- barplot(sort(tab_time, decreasing = T),
        main = "Fahrzeiten",
        ylab = "absolute Häufigkeiten",
        col = "red",
        las = 2,
        horiz = F,
        cex.names = 1
          )

dat$Q10_beruf


bodysize <- dat$Q04_Koerpergroesse
handsize <- dat$Q06_Handspanne
plot(bodysize, handsize, main = "Scatter Plot Körpergrösse vs. Handspanne",
     xlab = "Körpergrösse [cm]", ylab = "Handspanne [cm]", pch = 19, col = "blue")

# Fit a linear model to the data
 #fit <- lm(handsize ~ bodysize)

# Add a trend line to the scatter plot
# abline(fit, col = "red")
```

## Day 02 13.09.2023

### logische Operationen

```{r}
a <- c(T, T, F, F)
b <- c(T, F, T, F)

sum(a)
sum(b)
5*a
5*b
a+b
a & b
a | b
!a | b
b | !a
!a
(a|b)+(a&b)

v <- c(160, 145, 195, 173, 181)
min(v - 150)
max(log(v - 150)) < 1
min(v - 150) > 0 && max(log(v - 150)) < 1
```

### Arbeitsblatt 3

#### Aufgabe 1

```{r}
file.path <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\imports85.txt"
imports85 <- read.table(file.path, header = T)
table(imports85$cyl, imports85$wheels)
imports85$cyl <- factor(imports85$cyl, levels = c("two", "three", "four", "five", "six", "eight", "twelve"))
prop.cyl.wheel <- round(prop.table(table(imports85$cyl, imports85$wheels)), 2)
print(prop.cyl.wheel*100)
mosaicplot(prop.cyl.wheel, color = 2:9)
barplot(prop.cyl.wheel)
barplot(prop.cyl.wheel, beside = T)

# Aufgabe 1c
# DDarstellung der Beziehung zwischen Preis und Zylinderzahl
table(imports85$price, imports85$cyl)
barplot(table(imports85$price, imports85$cyl))
plot(imports85$cyl, imports85$price)
plot(imports85$price, imports85$cyl)
plot(ecdf(imports85$price))
plot(ecdf(imports85$cyl))
plot(ecdf(imports85$city.mpg))
hist(imports85$city.mpg)
```

befehle um Tabell/Daten anzuscheun

```{r}
head(imports85)
dim(imports85)
ncol(imports85)
nrow(imports85)
colnames(imports85)
str(imports85)

```

Farben einstellen über hex code: html-color.codes oder "colors" oder im www R colors

read.table liest generisch ein, read.csv etc sind wrapper, die dann read.table aufrufen.

Working direktory


setwd()
getwd()

#zum löschen
rm()



## R Übungsblatt 3

#### Aufgabe 1

```{r}
path.csv <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\Erhebung_CAS_DA_HS23.csv"
path.txt <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\Erhebung_CAS_DA_HS23.txt"


dat.csv <- read.table(path.csv, header = T, sep = ",")
dat.txt <- read.table(path.txt, header = T, sep = "\t")
all.equal.character(dat.csv, dat.txt)

path.xls <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\Erhebung_CAS_DA_HS23.xlsx"
dat.x <- read.table(path.xls)



```

#### Aufgabe 1 Kibitze \@ ZRH

```{r}
path.kib <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\kiebitz.txt"
kibitze.zrh <- read.table(path.kib, header = T, sep = ",")
str(kibitze.zrh)
#selektion anhand der Zeilen Nr
kibitze.zrh[c(1,3,7),]

#Selektion über Booleschen Vektor
vsel <- kibitze.zrh$Feld.Nr == 1411
kibitze.1411 <- kibitze.zrh[vsel,]
kibitze.1411
#Anzahl Kibitze auf Feld 1411
sum(kibitze.1411$Anzahl)

#davon Anzahl fressender Vögel
vsel.fr <- kibitze.1411$Taetigkeit == "fr"
kibitze.1411.fr <- kibitze.1411[vsel.fr]
sum(kibitze.1411.fr$Anzahl)

#insgesamt ruhende Vögel
vsel.ru <- kibitze.zrh$Taetigkeit == "ru"
kibitze.ru <- kibitze.zrh[vsel.ru, ]
table(kibitze.ru$Feld.Nr)

```

###R-Übungsblatt 3 ####Aufgabe 3

```{r}
#a
sleep.path <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\sleep.txt"
sleep.zhaw <- read.table(sleep.path, header = T, sep = "\t")

#b
nrow(sleep.zhaw)

#c
sleep.zhaw$diff <- sleep.zhaw$Schlafmittel - sleep.zhaw$Placebo
plot(ecdf(sleep.zhaw$diff))
```

##R-Übungsblatt 4 ###Aufgabe 1 ist Teil der Kibitz Aufgabe oben

###Aufgabe 2

```{r}
#Einlesen der Daten
library(readxl)
path.CAS <- "C:\\Users\\oliver.speer\\Documents\\ZHAW\\Erhebung_CASDA_HS23.xlsx"
dat.CAS <- read_excel(path.CAS) |> as.data.frame()

#Entfernen der ersten 7 Spalten
dat.CAS <- dat.CAS[, -c(1:7)]

#Entfernen der ersten 4 Zeichen Q.._
colnames(dat.CAS) <-  substring(colnames(dat.CAS), 5)

#umwandeln der Körpergrössen in numerische Angaben
dat.CAS$Koerpergroesse <- as.numeric(dat.CAS$Koerpergroesse)

#boxplot der Körpergrössenverteilung zwischen W und M in Kombination mit der Haarfarbe
par(mar =c(8, 5, 1, 2))
boxplot(Koerpergroesse ~ Geschlecht + Haarfarbe, 
        data = dat.CAS, 
        las = 2, 
        xlab = "")

#Wie gross ist die relative Häufigkeit aller Studierenden 
#mit einer Körpergrösse > 180cm?
rel.hauf.ü180 <- round(nrow(subset(dat.CAS, Koerpergroesse > 180))/nrow(dat.CAS), 2)*100
print(paste("Relative Häufigkeit von Studierenden mit einer 
            Körpergröße über 180 cm:", rel.hauf.ü180,"%"))

#Berchnung der absoluten Median Abweichung
# Median absolute Deviation MAD
mad.KG <- round(mad(dat.CAS$Koerpergroesse), 3)
sd.KG <- round(sd(dat.CAS$Koerpergroesse), 2)
print(paste("Vergleich MAD:", mad.KG, "vs SD:", sd.KG))
```

## Modul B - Multiple Regression, die Basis der Datenanalyse und Prognose

## Modul C - Data Mining mit Schwerpunkt Clustering und Klassifikation

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
